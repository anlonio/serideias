generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model contacts {
  id         Int      @id @default(autoincrement())
  profile_id String   @db.Uuid
  contact    String
  label      String
  type       String?  @default("other")
  profile    profiles @relation(name: "ContactsToProfile", fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  postsId    Int?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id         String     @id @db.Uuid
  updated_at DateTime?  @db.Timestamptz(6)
  uuid       String     @unique @default(uuid()) @db.Uuid
  username   String?    @unique
  full_name  String?
  avatar_url String?
  website    String?
  bio        String?
  occupation String?
  education  String?
  contacts   contacts[] @relation(name: "ContactsToProfile")
  posts      posts[]    @relation(name: "PostToAuthor")
  replies    replies[]  @relation(name: "ReplyToAuthor")

  @@index([username])
  @@index([uuid])
}

model posts {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid()) @db.Uuid
  created_at  DateTime?  @db.Timestamptz(6)
  updated_at  DateTime?  @db.Timestamptz(6)
  title       String
  content     String
  keywords    String[]
  author_id   String     @db.Uuid
  location_id Int?
  location    locations? @relation(name: "PostsToLocation", fields: [location_id], references: [id])
  author      profiles   @relation(name: "PostToAuthor", fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     replies[]  @relation(name: "PostToReplies")

  @@index([uuid])
  @@index([location_id])
}

model replies {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  content     String
  post_id     Int?
  reply_id    Int?
  author_id   String    @db.Uuid
  author      profiles  @relation(name: "ReplyToAuthor", fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post        posts?    @relation(name: "PostToReplies", fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentReply replies?  @relation(name: "ReplyToReply", fields: [reply_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     replies[] @relation(name: "ReplyToReply")

  @@index([uuid])
  @@index([post_id])
  @@index([reply_id])
  @@index([author_id])
}

model locations {
  id    Int     @id @default(autoincrement())
  uuid  String  @unique @default(uuid()) @db.Uuid
  name  String
  posts posts[] @relation(name: "PostsToLocation")
}
